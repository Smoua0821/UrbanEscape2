<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      crossorigin="anonymous"
    />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  </head>
  <body>
    <div class="navbar py-4 bg-dark text-white">
      <div class="container">
        <a href="/admin" target="_blank"
          ><%= mapName %> Preset - Urbanescapes</a
        >
      </div>
    </div>
    <div class="mt-5">
      <div class="container">
        <div id="g-map"></div>
        <div
          class="my-3 images-container justify-content-center row"
          style="display: none"
        >
          <div class="m-0 p-0 col-sm-10 col-md-8 col-lg-6" method="POST">
            <input type="hidden" name="polyCoords" />
            <div class="form-group mb-2">
              <input
                type="text"
                id="routeTitle"
                class="form-control"
                placeholder="Enter Route Title"
              />
            </div>
            <div class="form-group mb-2">
              <textarea
                rows="8"
                id="routeDescription"
                class="form-control"
                placeholder="Enter Route Description"
              ></textarea>
            </div>
            <div class="form-group mb-2">
              <p class="m-0">Adjust Radius (0-1000):</p>
              <input
                type="number"
                max="1000"
                step="1"
                value="0"
                class="form-control"
                placeholder="Radius of Image"
                id="radiusNum"
              />
            </div>
            <div class="form-group mb-2">
              <p class="m-0">Adjust Size (1-10):</p>
              <input
                type="number"
                max="10"
                min="1"
                step="1"
                value="5"
                class="form-control"
                placeholder="Size of Image"
                id="sizeNum"
              />
            </div>
            <div class="form-group mb-2">
              <p>Opacity of Circle (0-100)</p>
              <input
                type="number"
                min="0"
                max="100"
                value="100"
                class="form-control"
                id="loopOpacity"
              />
            </div>
            <div class="form-group mb-2">
              <p class="m-0">Image Speed (0-100):</p>
              <input
                type="number"
                min="0"
                value="1"
                max="100"
                id="imageSpeed"
                class="form-control"
              />
            </div>
            <div class="row justify-content-center">
              <% images.forEach(img => { %>
              <div class="col-6 col-sm-4 col-lg-3">
                <div class="img-container" data-src="<%=img%>">
                  <img src="/images/mapicons/<%=img%>" width="100%" />
                </div>
              </div>
              <% }); %>
            </div>
          </div>
        </div>
        <div class="navigation mt-3">
          <button class="btn btn-primary cenpo" style="display: none">
            Set Center Point
          </button>
          <button class="btn btn-info roupo" style="display: none">
            Save Preset
          </button>
          <button class="btn closePathBtn btn-primary" style="display: none">
            Close Path
          </button>
        </div>
      </div>
    </div>
    <style>
      #g-map {
        height: 80vh;
      }
    </style>
    <script src="https://maps.googleapis.com/maps/api/js?libraries=marker&loading=async&callback=initMap&key=<%= apiKey %>"></script>
    <script>
      function initMap() {
        const url = window.location.pathname.split("/");
        const mapId = url[url.length - 1];
        let unClick = false;
        navigator.geolocation.getCurrentPosition(
          (position) => {
            function getDistanceAndAngle(lat2, lon2) {
              const lat1 = centerMarker.position.lat;
              const lon1 = centerMarker.position.lng;
              const R = 6371000;
              const toRad = (angle) => (angle * Math.PI) / 180;
              const toDeg = (rad) => (rad * 180) / Math.PI;

              const φ1 = toRad(lat1);
              const φ2 = toRad(lat2);
              const Δφ = toRad(lat2 - lat1);
              const Δλ = toRad(lon2 - lon1);

              const a =
                Math.sin(Δφ / 2) ** 2 +
                Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) ** 2;
              const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
              const distance = R * c;

              const y = Math.sin(Δλ) * Math.cos(φ2);
              const x =
                Math.cos(φ1) * Math.sin(φ2) -
                Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);
              const θ = Math.atan2(y, x);
              const angle = (toDeg(θ) + 360) % 360;

              return { distance, angle };
            }
            let centerMarker, coordsMarker, pathUI;
            const path = [];
            const uploadOption = {
              size: 5,
              radius: 30,
              speed: 1,
              opacity: 100,
            };
            const tmPath = [];
            let centerMode = true;
            let radiusCircle;
            const pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            };

            const map = new google.maps.Map(document.getElementById("g-map"), {
              zoom: 15,
              center: pos,
              mapId: "Main_Map",
            });

            centerMarker = new google.maps.marker.AdvancedMarkerElement({
              position: pos,
            });

            radiusCircle = new google.maps.Circle({
              strokeColor: "#000000",
              strokeOpacity: 0.8,
              strokeWeight: 2,
              fillColor: "#000000",
              fillOpacity: 0.5,
              center: pos,
              radius: uploadOption.radius,
            });

            $("#radiusNum").on("input", function () {
              const radius = parseInt($(this).val());
              if (isNaN(radius) || radius < 0 || radius > 1000) return;
              radiusCircle.setRadius(radius);
            });

            $("#loopOpacity").on("input", function () {
              const opacity = parseInt($(this).val());
              if (isNaN(opacity) || opacity < 0 || opacity > 100) return;
              radiusCircle.setOptions({ fillOpacity: (opacity * 0.5) / 100 });
            });

            const pathImg = document.createElement("img");
            pathImg.width = 100;
            let pathMarker = new google.maps.marker.AdvancedMarkerElement({
              position: pos,
              content: pathImg,
            });

            pathUI = new google.maps.Polyline();
            google.maps.event.addListener(map, "click", function (event) {
              if (unClick) return;
              if (centerMode) {
                centerMarker.position = event.latLng;
                console.log(centerMarker.position);
                centerMarker.setMap(map);
                $("button.cenpo").show();
              } else {
                const newPos = {
                  lat: event.latLng.lat(),
                  lng: event.latLng.lng(),
                };
                tmPath.push(newPos);
                path.push(getDistanceAndAngle(newPos.lat, newPos.lng));
                if (path.length >= 3) {
                  $(".closePathBtn").fadeIn();
                }
                pathUI.setPath([...tmPath]);
                pathUI.setMap(map);
              }
            });

            $(document).ready(function () {
              $(".navigation button").click(function () {
                if ($(this).hasClass("cenpo")) {
                  $(this).hide();
                  centerMode = false;
                }
              });
              $(".closePathBtn").click(() => {
                unClick = true;
                pathUI.setPath([...tmPath, tmPath[0]]);
                path.push(path[0]);
                $(".closePathBtn").hide();
                $(".images-container").fadeIn();
                $(".images-container .img-container").on("click", function () {
                  $(".roupo").hide();
                  const imgPath = $(this).data("src");
                  if (!imgPath) return;
                  uploadOption.image = imgPath;
                  $(".images-container .img-container").removeClass("active");
                  $(this).addClass("active");
                  $(".roupo").show();
                  pathMarker.setMap(map);
                  pathMarker.position = tmPath[0];
                  radiusCircle.setCenter(tmPath[0]);
                  radiusCircle.setMap(map);
                  pathImg.src = `/images/mapicons/${imgPath}`;
                  pathMarker.content = pathImg;
                });
              });
              $(".roupo").click(function () {
                uploadOption.title = $("#routeTitle").val();
                uploadOption.description = $("#routeDescription").val();
                uploadOption.size = $("#sizeNum").val();
                uploadOption.radius = $("#radiusNum").val();
                uploadOption.speed = $("#imageSpeed").val();
                uploadOption.opacity = $("#loopOpacity").val();

                $(this).attr("disabled", true);
                $(this).text("Loading........");
                $.post(
                  `/admin/preset/${mapId}`,
                  { path: JSON.stringify(path), ...uploadOption },
                  (d) => {
                    if (d.status == "success") {
                      alert("Preset saved successfully");
                    }
                    $(this).text("Save Preset");
                    $(this).attr("disabled", false);
                  }
                );
              });
            });
          },
          () => {
            alert("Failed to get your location.");
          }
        );
      }
    </script>
    <style>
      .images-container .img-container {
        padding: 20px;
        cursor: pointer;
        transition: all 0.2s;
      }

      .images-container .img-container:hover {
        padding: 5px;
        background: #0000001a;
      }

      .images-container .img-container.active {
        background: #8de4ff;
      }
    </style>
  </body>
</html>
