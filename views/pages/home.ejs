<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Google Map Integration</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css"
    />
    <script src="/js/jquery.js"></script>
  </head>
  <body style="margin: 0">
    <div id="map" style="height: 100vh; width: 100vw"></div>
    <div class="simpleLoading">
      <div class="loadingAnime"></div>
    </div>
    <div class="loadingScreen">
      <div class="icon-container">
        <img alt="Map Icon" src="/images/marker.png" width="100px" />
      </div>
      <div class="text-container">
        <h2>Please Wait......</h2>
        <p>Ensure You have enabled your location for a better experience</p>
      </div>
    </div>
    <div class="errorScreen" style="display: none">
      <div class="icon-container">
        <img alt="Map Icon" src="/images/marker.png" width="100px" />
      </div>
      <div class="text-container">
        <h2>Location Error</h2>
        <p class="locerrmsg">
          Ensure You have enabled your location for a better experience
        </p>
      </div>
    </div>
    <div class="WinScreen" style="display: none"></div>
    <%- include('../components/navbar') %>
    <script>
      let notyf;
      $(document).ready(() => {
        notyf = new Notyf();
        $(".user-navbar .navbar-container ul li").click(function () {
          const target = $(this).data("id");
          if (!target) return;
          window.location.href = target;
        });
      });
      let polygonCoordinates = [];
      let map, markerElement, circle, marker;
      let pos = { lat: 55.5, lng: 254.7 };
      let iconMarker = document.createElement("img");
      let currentSegment = 0;
      let currentStep = 0;
      let stepsPerSegment = 100;
      let speed = 10;
      let gameStarted = 0;
      iconMarker.width = 50;
      let polyIndex = 0;
      function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
          zoom: 15,
          center: pos,
          mapId: "main_map",
        });
        marker = new google.maps.marker.AdvancedMarkerElement({
          position: pos,
        });

        $(document).ready(() => {
          $(".simpleLoading").show();
        });

        map.addListener("click", (event) => {
          if (polygonCoordinates.length == 0)
            return notyf.error("No Route Available");
          const clickedLocation = event.latLng;
          const circleLocation = circle.getCenter();
          const clickDist = haversineDistance(
            {
              lat: pos.lat,
              lng: pos.lng,
            },
            markerElement.position
          );
          console.log(
            `Clicked: ${clickDist}  Radii: ${circle.getRadius() / 1000}`
          );
          if (clickDist <= circle.getRadius() / 1000) {
            const ImgPath = iconMarker.src.split("/");
            $.post(
              "/user/profile/capture",
              { image: ImgPath[ImgPath.length - 1] },
              (data, status, xhr) => {
                if (
                  status === "success" &&
                  data.message === "Image Captured successfully!"
                ) {
                  notyf.success("Picture Added to Your Profile!");
                  if (polygonCoordinates.length > 0) {
                    removeObjectByIndex(polygonCoordinates, polyIndex);
                    polyIndex = nearestPolygon().index;
                  } else {
                    notyf.success("You have Captured All images!");
                    $(".WinScreen").fadeIn();
                  }
                } else {
                  const errorMessage =
                    data.message ||
                    "An error occurred while capturing the image.";
                  notyf.error(errorMessage);
                }
              }
            ).fail((xhr, status, error) => {
              const errorMessage =
                xhr.responseJSON?.message || "An unexpected error occurred.";
              notyf.error(errorMessage);
              let dCode = xhr.responseJSON?.code || 0;
              if (dCode == 1) {
                if (polygonCoordinates.length > 0) {
                  removeObjectByIndex(polygonCoordinates, polyIndex);
                  polyIndex = nearestPolygon().index;
                }
              }
            });
          }
          nearestPolygon();
          if (!gameStarted) {
            startGaming();
          }
        });
        markerElement = new google.maps.marker.AdvancedMarkerElement({
          position: pos,
          map: map,
          content: iconMarker,
        });

        circle = new google.maps.Circle({
          center: pos,
          radius: 1000,
          clickable: false,
        });
        showAllPolygons();
      }

      function showAllPolygons() {
        $.get("/api/looproute", (data, success) => {
          if (!success) return;
          polygonCoordinates = data;
          updateCurrentLocation();
        });
      }

      function moveMarker(imageSrc, coordinates) {
        if (!iconMarker.src.match(imageSrc)) {
          iconMarker.src = imageSrc;
        }
        markerElement.position = coordinates[polyIndex];
        circle.setRadius(polygonCoordinates[polyIndex].radius);
      }
      function removeObjectByIndex(arr, index) {
        if (index > -1 && index < arr.length) {
          arr.splice(index, 1);
        }
      }
      let isFirstTime = 1;
      function updateCurrentLocation() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              $(".simpleLoading").fadeOut();
              pos.lat = position.coords.latitude;
              pos.lng = position.coords.longitude;
              nearestPolygon();
              marker.position = pos;
              marker.setMap(map);
              if (isFirstTime) {
                isFirstTime = 0;
                map.panTo(pos);
                startGaming();
              }
              console.log(pos);
            },
            (error) => {
              $(".errorScreen").show();
              $("#map").remove();
              let locerrmsg = "";
              switch (error.code) {
                case error.PERMISSION_DENIED:
                  locerrmsg = "User denied the request for Geolocation.";
                  break;
                case error.POSITION_UNAVAILABLE:
                  locerrmsg = "Location information is unavailable.";
                  break;
                case error.TIMEOUT:
                  locerrmsg = "The request to get user location timed out.";
                  break;
                case error.UNKNOWN_ERROR:
                  locerrmsg = "An unknown error occurred.";
                  break;
                default:
                  locerrmsg = "An error occurred while retrieving location.";
              }
              notyf.error(locerrmsg);
              $(".locerrmsg").text(locerrmsg);
            }
          );
          setTimeout(updateCurrentLocation, 10000);
        } else {
          notyf.error("Geolocation is not supported by this browser.");
        }
      }

      function interpolate(start, end, factor) {
        if (
          !start ||
          !start.lat ||
          !start.lng ||
          !end ||
          !end.lat ||
          !end.lng
        ) {
          return polygonCoordinates[polyIndex].polygonCoords[0];
        }

        return {
          lat: start.lat + (end.lat - start.lat) * factor,
          lng: start.lng + (end.lng - start.lng) * factor,
        };
      }

      function animateMarker() {
        const urlParsed = new URL(iconMarker.src);
        if (urlParsed.pathname != polygonCoordinates[polyIndex].image) {
          iconMarker.src = polygonCoordinates[polyIndex].image;
        }
        const start =
          polygonCoordinates[polyIndex].polygonCoords[currentSegment];
        const end =
          polygonCoordinates[polyIndex].polygonCoords[currentSegment + 1];

        // Calculate the interpolation factor
        const factor = currentStep / stepsPerSegment;
        const newPos = interpolate(start, end, factor);
        markerElement.position = newPos;
        circle.setCenter(newPos);
        if (
          polygonCoordinates[polyIndex].polygonCoords.length <
          currentSegment + 1
        ) {
          currentSegment = 0;
        }
        stepsPerSegment =
          haversineDistance(
            polygonCoordinates[polyIndex].polygonCoords[currentSegment],
            polygonCoordinates[polyIndex].polygonCoords[currentSegment + 1]
          ) * 500;
        currentStep++;

        // Move to next segment if current segment is done
        if (currentStep > stepsPerSegment) {
          currentStep = 0;
          currentSegment++;
          // Loop back to start if at the end of the polygon path
          if (
            currentSegment >=
            polygonCoordinates[polyIndex].polygonCoords.length - 1
          ) {
            currentSegment = 0;
          }
        }
        // Repeat animation
        if (speed > 100) speed = 100;
        if (speed < 10) speed = 10;
        setTimeout(animateMarker, 1000 / speed);
      }

      function haversineDistance(coords1, coords2) {
        if (!coords1 || !coords2 || !coords1.lat || !coords2.lng) return;
        const toRadians = (degrees) => degrees * (Math.PI / 180);

        const lat1 = toRadians(coords1.lat);
        const lng1 = toRadians(coords1.lng);
        const lat2 = toRadians(coords2.lat);
        const lng2 = toRadians(coords2.lng);

        const dlat = lat2 - lat1;
        const dlng = lng2 - lng1;

        const a =
          Math.sin(dlat / 2) ** 2 +
          Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlng / 2) ** 2;

        const c = 2 * Math.asin(Math.sqrt(a));

        const R = 6371;
        return R * c;
      }

      function nearestPolygon() {
        const tmpaihjhsg = {
          distance: 0,
          index: 0,
        };
        for (let index = 0; index < polygonCoordinates.length; index++) {
          const element = polygonCoordinates[index];

          element.polygonCoords.forEach((d) => {
            if (
              tmpaihjhsg.distance > haversineDistance(pos, d) ||
              tmpaihjhsg.distance == 0
            ) {
              tmpaihjhsg.distance = haversineDistance(pos, d);
              tmpaihjhsg.index = index;
            }
          });
        }
        if (polyIndex != tmpaihjhsg.index) {
          polyIndex = tmpaihjhsg.index;
        }
        return tmpaihjhsg;
      }
      function startGaming() {
        if (polygonCoordinates && polygonCoordinates.length == 0) {
          notyf.error("No Route Found!");
          return false;
        }
        speed = polygonCoordinates[polyIndex].speed * 10;
        nearestPolygon();
        circle.setMap(map);
        stepsPerSegment =
          haversineDistance(
            polygonCoordinates[polyIndex].polygonCoords[0],
            polygonCoordinates[polyIndex].polygonCoords[1]
          ) * 500;
        moveMarker(
          polygonCoordinates[polyIndex].image,
          polygonCoordinates[polyIndex].polygonCoords
        );
        animateMarker();
        gameStarted = 1;
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?callback=initMap&libraries=marker&key=<%= apiKey %>"></script>

    <script>
      setTimeout(function () {
        $(".loadingScreen").fadeOut(() => {
          $(".loadingScreen").remove();
        });
      }, 1000);
    </script>

    <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
  </body>
</html>
