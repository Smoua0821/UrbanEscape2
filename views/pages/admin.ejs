<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin</title>
    <link href="/css/bs.css" rel="stylesheet" crossorigin="anonymous" />
    <script src="/js/jquery.js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css"
    />

    <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
  </head>
  <body>
    <div class="row m-0 p-0">
      <div class="col-md-4 col-lg-3 vh-100 sidebar-container">
        <div class="sidebar">
          <div class="logo text-center p-2">
            <h1 onclick="window.open('/', '_self')">Mappy</h1>
          </div>
          <div class="menu">
            <ul style="list-style: none">
              <li data-link="home" class="active">Home</li>
              <li data-link="users">Users</li>
              <li data-link="routes">Routes</li>
              <li data-link="maplist">Map List</li>
            </ul>
          </div>
        </div>
      </div>
      <div class="col-md-8 col-lg-9">
        <div class="body-container vh-100" style="overflow-y: scroll">
          <div class="dynamic-container">
            <div class="vj_dynamic home">
              <div
                class="container d-flex justify-content-center align-items-center vh-100"
              >
                <div class="text-center">
                  <h3>Welcome</h3>
                  <img
                    class="lazy"
                    data-src="/images/dancer.gif"
                    width="200px"
                    alt="welcome dancer"
                  />
                  <p class="alert alert-warning">
                    Hello, Welcome Admin! Here you can manage all the stuff of
                    the Website!
                  </p>
                </div>
              </div>
            </div>
            <div class="vj_dynamic users">
              <div class="user-container">
                <table class="table table-striped">
                  <thead>
                    <tr>
                      <th>Sr no.</th>
                      <th>Name</th>
                      <th>Email</th>
                      <th>Since</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% let index = 1; %> <% users.forEach(user => { %> <% if
                    (user.role.current!="admin") { %>
                    <tr data-id="<%= user._id %>">
                      <td><%= index++ %></td>
                      <td><%= user.name %></td>
                      <td><%= user.email %></td>
                      <td>
                        <%= new Date(user.createdAt).toLocaleDateString('en-US')
                        %>
                      </td>
                      <td>
                        <button
                          class="btn btn-danger delete"
                          data-id="<%= user._id %>"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                    <% } %> <% }) %>
                  </tbody>
                </table>
              </div>
            </div>
            <div class="vj_dynamic routes">
              <div class="map-container">
                <div class="g-map vh-100"></div>
                <div class="map-controller" style="display: none">
                  <div class="d-flex bg-white p-2 rounded-2">
                    <button class="btn btn-outline-warning undo">Undo</button>
                    <button class="btn btn-outline-warning cpath">
                      Close Path
                    </button>
                    <button class="btn btn-outline-success save">Save</button>
                  </div>
                </div>
              </div>
            </div>
            <div class="vj_dynamic maplist">
              <div class="row justify-content-center">
                <form
                  class="form my-5 bg-light p-3 col-sm-10 col-md-8 col-lg-6 m-0 new_map_form"
                >
                  <h3 class="text-center m-0 mb-3">New Map</h3>
                  <div class="d-flex">
                    <input
                      placeholder="Map Name"
                      class="form-control"
                      name="name"
                      id="name"
                    />
                    <button class="ms-2 btn btn-warning">Create</button>
                  </div>
                </form>
                <div class="row justify-content-center">
                  <div
                    class="missionsCreator text-center col-sm-10 col-md-8 col-lg-6 mt-3"
                    style="display: none"
                  >
                    <p class="mb-1 mt-2">Set Missions</p>
                    <div class="form-group mb-2">
                      <input
                        placeholder="Mission Name"
                        class="form-control"
                        name="missionname"
                        id="missionname"
                      />
                    </div>
                    <div class="form-group mb-2">
                      <input
                        placeholder="Redirect URL"
                        type="url"
                        class="form-control"
                        name="missionredirect"
                        id="missionurl"
                      />
                    </div>
                    <% if (icons) { %>
                    <p class="m-0">Select Image</p>
                    <div class="mission-icons row">
                      <% icons.forEach(icon => { %>
                      <div
                        class="col-sm-4 p-2 border-1 rounded-1 text-center mission-icon-select"
                        data-src="<%= icon %>"
                      >
                        <img
                          class="lazy"
                          alt="<%= icon %>"
                          data-src="/images/mapicons/<%= icon %>"
                          width="100px"
                        />
                      </div>
                      <% }) %>
                    </div>
                    <p
                      class="bg-danger py-2 px-4 text-white rounded-2 d-inline-block"
                    >
                      <span id="selectedImagesCount">0</span> Image Selected
                    </p>
                    <a
                      class="btn btn-warning missionBtnSave w-100 my-2"
                      href="javascript:saveMission()"
                      style="display: none"
                    >
                      Save
                    </a>
                    <% } %>
                  </div>
                </div>
              </div>
              <table class="table table-striped">
                <thead>
                  <th>Name</th>
                  <th>Link</th>
                  <th>Action</th>
                </thead>
                <tbody class="map_list"></tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      class="modal fade"
      id="savePolyModal"
      tabindex="-1"
      aria-labelledby="savePolyModal"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <div class="container">
              <form class="m-0 p-0" method="POST">
                <input type="hidden" name="polyCoords" />
                <div class="form-group mb-2">
                  <p class="m-0">Adjust Radius:</p>
                  <div class="row m-0 p-0">
                    <div class="col-sm-8">
                      <input
                        type="range"
                        oninput="setMapRadius(this)"
                        max="1000"
                        step="1"
                        value="0"
                        class="form-control"
                        placeholder="Radius of Image"
                        id="radiusRange"
                      />
                    </div>
                    <div class="col-sm-4">
                      <input
                        type="number"
                        oninput="setMapRadiusNum(this)"
                        max="1000"
                        step="1"
                        value="0"
                        class="form-control"
                        placeholder="Radius of Image"
                        id="radiusNum"
                      />
                    </div>
                  </div>
                </div>
                <div class="form-group mb-2">
                  <p class="m-0">Adjust Size:</p>
                  <div class="row m-0 p-0">
                    <div class="col-sm-8">
                      <input
                        type="range"
                        oninput="setMarkerSize(this)"
                        max="10"
                        step="1"
                        value="5"
                        class="form-control"
                        id="sizeRange"
                      />
                    </div>
                    <div class="col-sm-4">
                      <input
                        type="number"
                        oninput="setMarkerSizeNum(this)"
                        max="10"
                        step="1"
                        value="5"
                        class="form-control"
                        placeholder="Size of Image"
                        id="sizeNum"
                      />
                    </div>
                  </div>
                </div>
                <div class="form-group mb-2">
                  <p>Opacity of Circle (0-100)</p>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value="100"
                    class="form-control"
                    oninput="setCircleOpacity(this)"
                  />
                </div>
                <div class="form-group mb-2">
                  <p class="m-0">Image Speed</p>
                  <input
                    type="number"
                    min="1"
                    value="1"
                    oninput="setMarkerSpeed(this)"
                    max="10"
                    class="form-control"
                  />
                </div>
                <% if (icons) { %>
                <p class="m-0">Select Image</p>
                <div class="icon-container row justify-content-center">
                  <% icons.forEach(icon => { %>
                  <div
                    class="col-sm-4 p-2 border-1 rounded-1 text-center icon-selector"
                    data-src="/images/mapicons/<%= icon %>"
                  >
                    <img
                      class="lazy"
                      alt="<%= icon %>"
                      data-src="/images/mapicons/<%= icon %>"
                      width="100px"
                    />
                  </div>
                  <% }) %>
                  <div class="col-sm-4 p-2 border-1 rounded-1 icon-selector">
                    <div class="addImage"></div>
                  </div>
                </div>
                <% } %>
              </form>
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Preview
            </button>
            <button type="button" class="btn btn-primary save_final">
              Save changes
            </button>
          </div>
        </div>
      </div>
    </div>
    <input
      type="file"
      id="image-upload"
      accept="image/png, image/jpeg, image/gif"
      style="display: none"
    />

    <script>
      const notyf = new Notyf();
      let isClosedPath = 0;
      let map, marker, polygon, circle, iconMarker, radius;
      let polyCoords = [];
      let speed = 1;
      let tmpImg;
      const beachFlagImg = document.createElement("img");
      let pos = { lat: 55.5, lng: 254.7 };
      let mapId = 0;
      let circleOpacity = 100;
      const missions = { redeemLink: "", name: "", images: [] };
      $(".mission-icons div.mission-icon-select").click(function () {
        const imgSrc = $(this).data("src");
        if (!imgSrc) return;
        // if (missions.images.includes(imgSrc)) return;
        missions.images.push(imgSrc);
        // $(this).fadeOut();
        $("#selectedImagesCount").text(missions.images.length);
        missions.images.length > 0
          ? $(".missionBtnSave").fadeIn()
          : $(".missionBtnSave").hide();
      });
      const setCircleOpacity = (event) => {
        circleOpacity = parseInt(event.value);
        if (circleOpacity < 0 && circleOpacity.value) {
          circleOpacity = 100;
          event.value = 100;
        }
        payloadData.opacity = circleOpacity;
        circle.setValues({
          fillOpacity: circleOpacity / 200,
          strokeOpacity: circleOpacity / 100,
        });
      };
      const setMarkerSpeed = (event) => {
        speed = event.value;
        if (speed < 1) {
          event.value = 1;
        } else if (speed > 10) {
          event.value = 10;
        }
        speed = event.value;
        payloadData.speed = speed;
      };
      const setMarkerSize = (event) => {
        let size = parseInt(event.value);
        if (size < 1) {
          size = 1;
        }
        if (size > 10) {
          size = 10;
        }
        payloadData.size = size;
        $("#sizeNum").val(size);
        beachFlagImg.width = size * 10;
      };
      const setMarkerSizeNum = (event) => {
        let size = parseInt(event.value);
        if (size < 1) {
          size = 1;
        }
        if (size > 10) {
          size = 10;
        }
        $("#sizeRange").val(size);
        beachFlagImg.width = size * 10;
      };
      const setMapRadius = (event) => {
        circle.setCenter(polyCoords[0]);
        radius = Math.pow(event.value / 10, 1.5) * (1000 / map.getZoom());
        $("#radiusNum").val(event.value);
        circle.setRadius(radius);
        circle.setMap(map);
        payloadData.radius = parseInt(radius);
      };
      const setMapRadiusNum = (event) => {
        if (event.value > 1000) {
          event.value = 1000;
        }
        circle.setCenter(polyCoords[0]);
        radius = Math.pow(event.value / 10, 1.5) * (1000 / map.getZoom());
        $("#radiusRange").val(event.value);
        circle.setRadius(radius);
        circle.setMap(map);
        payloadData.radius = parseInt(radius);
      };
      let payloadData = {
        polygonCoords: polyCoords,
        image: beachFlagImg.src,
        radius: radius,
        speed: speed,
      };
      $(".save_final").click(() => {
        if (
          payloadData.polygonCoords.length > 2 &&
          payloadData.radius > 0 &&
          payloadData.image &&
          payloadData.speed
        ) {
          payloadData.polygonCoords = polyCoords;
          $.post("/admin/looproute", payloadData, (success, data) => {
            if (success) {
              notyf.success("New Route added successfully!");
              $("#savePolyModal").modal("hide");
              marker.setMap(null);
              iconMarker.setMap(null);
              polygon.setMap(null);
              circle.setMap(null);

              new google.maps.Polyline({
                path: payloadData.polygonCoords,
                map: map,
              });
              new google.maps.Circle({
                center: payloadData.polygonCoords[0],
                map: map,
                radius: payloadData.radius,
              });
            }
          });
          $(".icon-selector").removeClass("active");
          polyCoords = [];
          $(".map-controller").fadeOut();
        } else {
          notyf.error("Invalid Configuration!");
        }
      });
      $(".icon-selector").click(function () {
        $(".icon-selector").removeClass("active");
        $(this).addClass("active");
        if (!$(this).data("src")) {
          $("#image-upload").click();
          return;
        }
        iconMarker.setMap(map);
        iconMarker.position = polyCoords[0];
        beachFlagImg.width = 50;
        beachFlagImg.src = $(this).data("src");
        payloadData.image = $(this).data("src");
      });
      $(".map-controller .undo").click(() => {
        isClosedPath = 0;
        polyCoords.pop();
        circle.setMap(null);
        polygon.setPath(polyCoords);
        marker.position = polyCoords[polyCoords.length - 1];
        if (polyCoords.length == 0) {
          $(".map-controller").hide();
          marker.setMap(null);
        }
      });
      $(".map-controller .save").click(() => {
        if (isClosedPath) {
          $("#savePolyModal").modal("show");
        } else {
          notyf.error("Please Close the path before saving...");
        }
      });
      $(".map-controller .cpath").click(() => {
        $("btn.undo").hide();
        if (isClosedPath) return;
        if (polyCoords[0] != polyCoords[polyCoords.length - 1]) {
          polyCoords.push(polyCoords[0]);
          isClosedPath = 1;
          polygon.setPath(polyCoords);
          marker.setMap(null);
        }
      });
      function saveMission() {
        if (!mapId) return notyf.error("Invalid MapId");
        const missionName = $("#missionname").val();
        const missionUrl = $("#missionurl").val();
        if (!missionName || !missionUrl || missions.images.length == 0)
          return notyf.error("Name or URL can't be Empty");

        missions.redeemLink = missionUrl;
        missions.name = missionName;
        $.post(
          "/admin/map/missions",
          { mapId: mapId, missions: missions },
          (data) => {
            $(".missionsCreator").hide();
            $(".new_map_form").fadeIn();
            missions.redeemLink = "";
            missions.name = "";
            missions.images = [];
            $("#missionname").val("");
            $("#missionurl").val("");
            $(".mission-icons div.mission-icon-select").show();
            notyf.success("Missions Added");
          }
        );
      }
      $(document).ready(() => {
        fetchMaps();
        $("form.new_map_form").submit(function () {
          const mapName = $("form.new_map_form input#name").val();
          if (!mapName) alert("Please Enter a Valid Name");
          $.post("/admin/map", { name: mapName }, (data) => {
            if (data.status == "success") {
              notyf.success(`Form '${mapName}' created successfully!`);
              fetchMaps();
              $("form.new_map_form input#name").val("");
            }
          });
          return false;
        });
        $("#image-upload").on("change", function (e) {
          const file = e.target.files[0];
          if (!file) {
            notyf.error("Upload Valid Image");
            return;
          }
          const formData = new FormData();
          formData.append("image", file);
          $.ajax({
            url: "/admin/looproute/image",
            method: "POST",
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
              if (response && response.imageName) {
                $(this).data("src", response.imageName);
                $(".icon-container")
                  .prepend(`<div class="p-2 border-1 rounded-1 col-sm-4 icon-selector" data-src="/images/mapicons/${response.imageName}">
                    <img class="lazy" alt="${response.imageName}" data-src="/images/mapicons/${response.imageName}" width="100px">
                  </div>`);
                $(".icon-selector")
                  .off("click")
                  .click(function () {
                    $(".icon-selector").removeClass("active");
                    $(this).addClass("active");
                    if (!$(this).data("src")) {
                      $("#image-upload").click();
                      return;
                    }
                    iconMarker.setMap(map);
                    iconMarker.position = polyCoords[0];
                    beachFlagImg.width = 50;
                    beachFlagImg.src = $(this).data("src");
                    payloadData.image = $(this).data("src");
                  });
                console.log("Image uploaded successfully:", response.imageName);
                notyf.success(
                  `Image uploaded successfully: ${response.imageName}`
                );
              } else {
                notyf.error("Failed to upload image. Please try again.");
              }
            },
            error: function (xhr, status, error) {
              const errorMessage =
                xhr.responseJSON?.message || "An error occurred during upload.";
              notyf.error(errorMessage);
            },
          });
        });
        $(".user-container table tr button.delete").click(function () {
          const tarId = $(this).data("id");
          if (!tarId) return;
          const cnf = confirm("Are you Sure?");
          if (cnf) {
            $.post(`/admin/delete/${tarId}`, (data) => {
              $(`tr[data-id=${tarId}]`).fadeOut(function () {
                $(this).remove();
              });
              notyf.success(data.message);
            });
          }
        });
        $(".vj_dynamic").hide();
        $(".vj_dynamic.home").fadeIn();
        $(".sidebar-container .sidebar .menu ul li").click(function () {
          const linkId = $(this).data("link");
          if (!linkId) return;
          if (linkId == "routes") {
            if (!mapId) return notyf.error("Choose a Valid Map!");
            renderRoutes();
          }
          $(".vj_dynamic").hide();
          $(`.vj_dynamic.${linkId}`).fadeIn();
          $(".sidebar-container .sidebar .menu ul li").removeClass("active");
          $(this).addClass("active");
        });
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              pos.lat = position.coords.latitude;
              pos.lng = position.coords.longitude;
              if (map) map.panTo(pos);
            },
            (error) => {
              $(".errorScreen").show();
              $("#map").remove();
              let locerrmsg = "";
              switch (error.code) {
                case error.PERMISSION_DENIED:
                  locerrmsg = "User denied the request for Geolocation.";
                  break;
                case error.POSITION_UNAVAILABLE:
                  locerrmsg = "Location information is unavailable.";
                  break;
                case error.TIMEOUT:
                  locerrmsg = "The request to get user location timed out.";
                  break;
                case error.UNKNOWN_ERROR:
                  locerrmsg = "An unknown error occurred.";
                  break;
                default:
                  locerrmsg = "An error occurred while retrieving location.";
              }
              notyf.error(locerrmsg);
              $(".locerrmsg").text(locerrmsg);
            }
          );
        } else {
          notyf.error("Geolocation is not supported by this browser.");
        }
      });
      let bulkPolyLine, bulkCircle, bulkMarker;
      function renderRoutes() {
        map = new google.maps.Map(document.getElementsByClassName("g-map")[0], {
          zoom: 15,
          center: pos,
          mapId: "Main_Map",
        });
        marker = new google.maps.marker.AdvancedMarkerElement({
          position: pos,
        });
        marker.setMap(null);
        polygon = new google.maps.Polyline({
          map: map,
        });
        circle = new google.maps.Circle({
          center: pos,
          radius: 5000,
        });

        iconMarker = new google.maps.marker.AdvancedMarkerElement({
          position: pos,
          content: beachFlagImg,
        });
        polygon.setMap(null);
        google.maps.event.addListener(map, "click", (event) => {
          if (isClosedPath) {
            isClosedPath = 0;
            polyCoords = [];
            polygon.setMap(null);
            circle.setMap(null);
            iconMarker.setMap(null);
            $(".btn.undo").fadeIn();
          }
          const clickedLocation = event.latLng;
          const lng = clickedLocation.lng();
          const lat = clickedLocation.lat();
          const tmp = {
            lat: lat,
            lng: lng,
          };
          polyCoords.push(tmp);
          marker.position = tmp;
          marker.setMap(map);
          $(".map-controller").hide();
          if (polyCoords.length > 1) {
            $(".map-controller").show();
            polygon.setPath(polyCoords);
            polygon.setMap(map);
          }
        });

        if (bulkPolyLine) bulkPolyLine.setMap(null);
        if (bulkCircle) bulkCircle.setMap(null);
        if (bulkMarker) {
          bulkMarker.setMap(null);
          bulkMarker.remo;
        }
        $.get(`/api/looproute/${mapId}`, (data) => {
          data.forEach((path) => {
            bulkPolyLine = new google.maps.Polyline({
              map: map,
              path: path.polygonCoords,
            });
            const cco = path.polygonCoords[0];
            bulkCircle = new google.maps.Circle({
              map: map,
              radius: path.radius,
              center: cco,
            });
            tmpImg = document.createElement("img");
            tmpImg.src = path.image;
            tmpImg.width = 10 * path.size;
            bulkMarker = new google.maps.marker.AdvancedMarkerElement({
              position: cco,
              map: map,
              content: tmpImg,
            });
            bulkMarker.addListener("click", function () {
              const cnf = confirm("Do you want to delete this Route?");
              if (!cnf) return;
              $.post(
                "/admin/looproute/delete",
                { routeId: path._id },
                (data) => {
                  if (!data) return;
                  notyf.success(data.message);
                  renderRoutes();
                }
              );
            });
          });
        });
      }
      function fetchMaps() {
        $.get("/admin/map", (data) => {
          $("tbody.map_list").empty();
          const myData = data.maps.reverse();
          myData.forEach((d) => {
            $("tbody.map_list").append(
              `<tr><td>${d.name}</td><td><a target='_blank' href='/map/${d.id}'>View Map</a></td><td><button class='btn btn-info me-1 edit_map' data-id='${d.id}'>Edit</button><button class='me-1 btn btn-danger delete_map' data-id='${d.id}'>delete</button><button class='btn btn-warning setupMissions' data-id='${d.id}'>Missions</button></td></tr>`
            );
          });
          $(".delete_map")
            .off("click")
            .on("click", function () {
              const mapId = $(this).data("id");
              if (!mapId) return;
              if (!confirm("Are You sure?")) return;
              $.post("/admin/map/delete", { mapId: mapId }, (data) => {
                if (data.status == "success") {
                  notyf.success(data.message);
                  fetchMaps();
                }
              });
            });

          $(".edit_map")
            .off("click")
            .on("click", function () {
              mapId = $(this).data("id");
              if (!mapId) return;
              payloadData.mapId = mapId;
              $(
                ".sidebar-container .sidebar .menu ul li[data-link='routes']"
              ).click();
            });

          $(".setupMissions")
            .off("click")
            .on("click", function () {
              mapId = $(this).data("id");
              if (!mapId) return notyf.error("Invalid Map");
              $(".missionsCreator").fadeIn();
              $(".new_map_form").hide();
            });
        });
      }

      document.addEventListener("DOMContentLoaded", () => {
        const images = document.querySelectorAll(".lazy");

        let loadDelay = 0;
        function loadImageWithDelay(image) {
          setTimeout(() => {
            image.src = image.dataset.src;
            image.classList.remove("lazy");
          }, loadDelay);
          loadDelay += 200;
        }

        const observer = new IntersectionObserver(
          (entries, observer) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                loadImageWithDelay(entry.target);
                observer.unobserve(entry.target);
              }
            });
          },
          { rootMargin: "100px" }
        );
        images.forEach((image) => {
          observer.observe(image);
        });
      });
    </script>
    <style>
      .icon-selector .addImage {
        width: 100px;
        height: 100px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
      }

      .icon-selector .addImage:before {
        content: "+";
        font-size: 3rem;
        height: 5rem;
      }

      .sidebar-container {
        background: #e5ffbd;
        box-shadow: 2px 0px 11px 0px #00000091;
      }

      .sidebar-container .sidebar .logo {
        color: #ffffff;
        -webkit-text-stroke: 1px #000;
        text-shadow: 2px 2px #000000;
        transition: 0.1s;
        cursor: pointer;
      }

      .sidebar-container .sidebar .logo:hover {
        text-shadow: 0 0 #000000;
      }

      .sidebar-container .sidebar .menu ul li {
        padding: 5px 10px;
        margin: 2px 0;
        transition: 0.2s;
        cursor: pointer;
      }

      .sidebar-container .sidebar .menu ul {
        text-align: center;
        font-weight: 500;
        letter-spacing: 2px;
        padding: 0;
      }

      .sidebar-container .sidebar .menu ul li:hover {
        background: white;
      }

      .sidebar-container .sidebar .menu ul li.active {
        background: white;
        border-radius: 20px;
        border: 2px solid lightgrey;
        box-shadow: 2px 5px 10px lightgrey;
      }

      .map-controller {
        position: fixed;
        z-index: 999;
        bottom: 5px;
      }

      .map-controller .btn {
        margin: 0 5px;
      }

      .icon-container div {
        border: 1px solid lightgrey;
        box-shadow: 0 2px 10px 0 lightgrey;
        cursor: pointer;
        transition: 0.1s;
      }

      .icon-container div:hover {
        box-shadow: 0 0 0 0 lightgrey;
      }

      .icon-container div.active {
        background: #ededed;
        border: 2px dashed green;
        box-shadow: 0 0 0 0 lightgrey;
      }
    </style>
    <script src="https://maps.googleapis.com/maps/api/js?libraries=marker&key=<%= apiKey %>"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
